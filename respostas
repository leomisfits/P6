1)
  a) Os níveis de acesso significam que tudo que era public na classa base, continua public na classe que herda, o que era
  privado na classe base continua privado na classe que herda e o que era protected na classe base, continua protected
  na classe que herda.
  
  b) Os construtores padrão da classe base seriam chamados implícitamente caso não os invocarmos explicitamente.
  
  c) O compilador mostra um erro quando troca-se default por delete, na linha 9; Já quando apagamos a chamada do construtor
  padrão nas linhas 23 e 38, os mesmos são chamados implicitamente.
  
  d) O método title() está definido na linha 14, dentro da classe work, entre seus métodos públicos.

2) O resultado da execução desse programa é:
  base
  middle
  derived
  ~derived
  ~middle
  ~base
  
  E isso nos mostra que a classe derived constroi primeiro as classes que herdou, começando de base, para middle e finalmente
  derived e quando tratamos dos destrutores, a ordem é o inversa, destruindo a classe com especificidades primeiro e as classes
  que herdou por último, assim destruindo derived depois middle e por último base.

3) 
Em linhas gearais, eo que este programa é capaz de fazer é inicializar variáveis por meio da função make_derived() presente na 
classe "filha" derived. Ele também é capaz de incrementar valores de uma variável atrelada a uma das classes filhas da clase 
principal(clase base), como mostrado no segundo comando da função main, além de incrementar eferências
(mostrado no terceiro comando e quarto comando) e fazer soma dos valores de a e b (quinto comando).
